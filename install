#!/usr/bin/python

import os

os.umask(0)

assert(os.system('docker-compose --version') == 0, 'Docker compose не найден в PATH')

assert(os.system('docker --version') == 0, 'Docker не найден в PATH')

assert(os.system('python --version') == 0, 'Python не найден в PATH')

assert(os.system('pip --version') == 0, 'PIP не найден в PATH')

try:
    os.mkdir('./dist/', mode=0o777)
except:
    print('Dist directory already exists')

for i in ['./dist/compute', './dist/store', './dist/visualize']:
    if not os.path.isdir(i):
        os.mkdir(i, mode=0o777)

computePath = os.getcwd() + '/dist/compute'
storePath = os.getcwd() + '/dist/store'
visualizePath = os.getcwd() + '/dist/visualize'

composeFileContent = None
with open('docker-compose.yml_template', 'r') as composeFile:
    composeFileContent = composeFile.read()

composeFileContent = composeFileContent.replace('COMPUTE', computePath).replace('STORE', storePath).replace('VISUALIZE', visualizePath)

with open('dist/docker-compose.yml', 'w') as composeFile:
    composeFile.write(composeFileContent)

clickhouseInit='''
CREATE DATABASE IF NOT EXISTS raceanalysis;
CREATE TABLE IF NOT EXISTS raceanalysis.comparison(uuid UUID) ENGINE = MergeTree() PRIMARY KEY uuid;
CREATE TABLE IF NOT EXISTS raceanalysis.last(id UUID) ENGINE = MergeTree() PRIMARY KEY id;
CREATE TABLE IF NOT EXISTS raceanalysis.racedata(raceid UUID, timepoint Float32, lapnumber Int32, maxcornerspeed Float32, mincornerspeed Float32, groundspeed Float32, tyrefl Float32, tyrefr Float32, tyrerl Float32, tyrerr Float32, fulel Float32) ENGINE = MergeTree() PRIMARY KEY raceid;
CREATE TABLE IF NOT EXISTS raceanalysis.racemetadata(uuid UUID, track  String, vehicleclass String, vehiclename  String, driver String, racedate Date, racetime String, samplespersec Float32, duration Float32, configname String) ENGINE = MergeTree() PRIMARY KEY uuid;
'''

with open('dist/store/clickhouse.sql', 'w') as clickhouseFile:
    clickhouseFile.write(clickhouseInit)

with open('dist/init-database.sh', 'w') as clickhouseScript:
    clickhouseScript.write("docker-compose exec store /bin/bash -c 'clickhouse-client --queries-file=/var/lib/clickhouse/clickhouse.sql'")

os.chmod('dist/init-database.sh', 0o755)

os.system('pip install clickhouse-driver paramiko pyqt5')
os.system('cd dist; docker-compose build')